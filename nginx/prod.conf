server {
  listen             80;

  # The iOS app has to get to brewtus via http, because
  # doing https in the background has not been made to
  # work.
  location /files {
     access_log /var/log/nginx/brewtus-access.log;
     error_log  /var/log/nginx/brewtus-error.log;

     proxy_set_header X-Real-IP  $remote_addr;
     proxy_set_header Host $host;
     proxy_set_header Port $server_port;
     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     proxy_redirect off;
     client_max_body_size 4G;
     client_body_buffer_size 256k;
     # reverse proxying aws ELB is problematic because by default
     # nginx only does a name resolution on startup, but the ELB
     # IP address changes all the time.  The solution is to add
     # a name server explicity, and to use a variable in the
     # proxy_pass.  This forces nginx to do name resolution on
     # the proxy_pass every time it is accessed (or every 5 minutes
     # or something like that!).  The funny resolver IP address is
     # the "Amazon DNS Server" found on this page:
     # http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html
     resolver 169.254.169.253;
     proxy_pass https://internal-UP-1053151001.us-west-2.elb.amazonaws.com$request_uri;
  }

  # Everything else including web site uploads get
  # redirected to SSL if they come in via http.
  location / {
     return 301 https://$host$request_uri;
  }
  return 301 https://$host$request_uri;
}

server {
  # server_name          viblio.com;
  listen               443 ssl;

  ssl_certificate      /etc/nginx/viblio.crt;
  ssl_certificate_key  /etc/nginx/viblio.key;
  ssl_ciphers          RC4:HIGH:!aNULL:!MD5;
  ssl_prefer_server_ciphers on;
  keepalive_timeout    70;

  access_log /var/log/nginx/access-viblio-ssl.log;
  error_log /var/log/nginx/error-viblio-ssl.log;

  # The web gui
  location / {
    root /deploy/prod/web-clients/durandal02/build;
    access_log        off;
    expires           0;
    add_header        Cache-Control private;
    sendfile          off;
  }

  # The corporate signup page
  location ~ ^/signup(?:/(.*))?$ {
    root /deploy/prod/web-clients/corp;
    sendfile	      off;
  }

  # The Cat server endpoints
  location /services {
    add_header Access-Control-Allow-Origin *;
    include fastcgi_params;
    client_max_body_size 4G;
    client_body_buffer_size 128k;
    fastcgi_pass localhost:30001;
  }

  # The Cat server shared endpoint, for images
  # and special pages shared on social sites
  # and email.  Unauthenticated.
  location /s {
    include fastcgi_params;
    client_max_body_size 4G;
    client_body_buffer_size 128k;
    fastcgi_pass localhost:30001;
  }

  # The message queue, a standalone NodeJS server
  location /mq {
     proxy_set_header X-Real-IP  $remote_addr;
     proxy_set_header Host $host;
     proxy_set_header Port $server_port;
     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     rewrite ^/mq/(.*) /$1 break; 
     proxy_redirect off;
     proxy_pass http://localhost:3002;
  }

  # Brewtus file upload server, a standalone NodeJS server
  location /files {
     access_log /var/log/nginx/brewtus-access-ssl.log;
     error_log  /var/log/nginx/brewtus-error-ssl.log;

     proxy_set_header X-Real-IP  $remote_addr;
     proxy_set_header Host $host;
     proxy_set_header Port $server_port;
     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     proxy_redirect off;
     client_max_body_size 4G;
     client_body_buffer_size 256k;
     # reverse proxying aws ELB is problematic because by default
     # nginx only does a name resolution on startup, but the ELB
     # IP address changes all the time.  The solution is to add
     # a name server explicity, and to use a variable in the
     # proxy_pass.  This forces nginx to do name resolution on
     # the proxy_pass every time it is accessed (or every 5 minutes
     # or something like that!).  The funny resolver IP address is
     # the "Amazon DNS Server" found on this page:
     # http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html
     resolver 169.254.169.253;
     proxy_pass https://internal-UP-1053151001.us-west-2.elb.amazonaws.com$request_uri;
  }

  # To the sw-admin web gui
  location /sw-admin {
     proxy_set_header X-Real-IP  $remote_addr;
     proxy_set_header Host $host;
     proxy_set_header Port $server_port;
     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     rewrite ^/sw-admin/(.*) /$1 break; 
     proxy_redirect off;
     client_max_body_size 500M;
     client_body_buffer_size 256k;
     proxy_pass http://localhost:3000;
  }

  location /autodiscover/autodiscover.xml {
     return 204;
     access_log off;
  }

}
